"""
Module that starts the gRPC generated servicer 
"""
from concurrent.futures import ThreadPoolExecutor
from uuid import uuid4
from grpc_reflection.v1alpha import reflection
import grpc
import log
import validate
import rides_pb2 as pb
import rides_pb2_grpc as rpc


def new_ride_id() -> str:
    """
    Generates a random UUID uniquely identifying a ride.

    Returns:
    --------
        str: Hexadecimal base64 encoded string uniquely identifying a ride request.
    """
    return uuid4().hex


class Rides(rpc.RidesServicer):
    """
    Implements the gRPC generated service class code by overriding it's Start method.

    Methods:
    --------
        Start(request, context): Starts the rides service generated by gRPC service type.
    """
    def Start(self, request, context) -> pb.StartResponse:
        """
        Starts a new ride service.

        
        Args:
        -----
        request: The request to service from client.
        context: The context to set statuscodes and details on gRPC or cancel RPC call.

        Returns:
        --------
            StartResponse: Response containing ride request id.
        """
        log.info('ride: %r', request)

        try:
            validate.start_request(request)
        except validate.Error as err:
            log.error('bad request: %s', err)
            # Set the context with gRPC status code and details of the error.
            context.set_code(grpc.StatusCode.INVALID_ARGUMENT)
            context.set_details(f"{err.field} is {err.reason}")
            # Raise the validation error.
            raise err

        # TODO: store ride in database
        ride_id = new_ride_id()
        return pb.StartResponse(id=ride_id)


if __name__ == "__main__":
    import config

    # Create a generic gRPC server with ThreadPoolExecutor.
    server = grpc.server(ThreadPoolExecutor())
    # Register our server to the gRPC server providing RidesServicer.
    rpc.add_RidesServicer_to_server(Rides(), server)
    # Use gRPC reflection to query methods and types available in server
    names = (
        pb.DESCRIPTOR.services_by_name['Rides'].full_name,
        reflection.SERVICE_NAME,
    )
    reflection.enable_server_reflection(names, server)
    addr = f"[::]:{config.port}"
    # gRPC uses HTTPS/2.0 to transfer data in-wire by default
    # Connect to gRPC server using HTTP/2.0.
    server.add_insecure_port(address=addr)
    # Start the server.
    server.start()

    log.info('server running on %r', addr)
    server.wait_for_termination()
