"""
Module that starts the server through gRPC generated servicer asynchronously.
"""
from concurrent.futures import ThreadPoolExecutor
from uuid import uuid4
# Adding gRPC reflection to server.
from grpc_reflection.v1alpha import reflection
import grpc
import log
import rides_pb2 as pb
import rides_pb2_grpc as rpc
import validate


def new_ride_id() -> str:
    """
    Generates a random UUID uniquely identifying a ride.

    Returns:
    --------
        str: Hexadecimal base64 encoded string uniquely identifying a ride request.
    """
    return uuid4().hex

class Rides(rpc.RidesServicer):
    """
    Implements the gRPC generated service class code by overriding it's Start and Track method.

    Methods:
    --------
        Start(request, context): Starts the rides service generated by gRPC service type.
        Track(request_iterator, context): Streams location requests to gRPC server.
    """
    def Start(self, request, context) -> pb.StartResponse:
        """
        Starts a new ride service.

        
        Args:
        -----
        request: The request to service from client.
        context: The context to set statuscodes and details on gRPC or cancel RPC call.

        Returns:
        --------
            StartResponse: Response containing ride request id.
        """
        log.info('ride: %r', request)

        try:
            validate.start_request(request)
        except validate.Error as err:
            log.error('bad request: %s', err)
            context.set_code(grpc.StatusCode.INVALID_ARGUMENT)
            context.set_details(f'{err.field} is {err.reason}')
            raise err

        # TODO: Store ride in database
        ride_id = new_ride_id()
        return pb.StartResponse(id=ride_id)

    def Track(self, request_iterator, context) -> pb.TrackResponse:
        """
        Track the ride requests location streamed to the server


        Args:
        ----
            request_iterator (iter(streaming requests): Iteration of requests streamed.
            context: The context to set statuscodes and details on gRPC or cancel RPC call.
        
        Returns:
        --------
            TrackResponse: Response containing no. of requests streamed.
        """
        count = 0
        for request in request_iterator:
            # TODO Store in database
            log.info('Track %s', request)
            count += 1
        return pb.TrackResponse(count=count)



if __name__ == '__main__':
    import config


    # Create a generic gRPC server with ThreadPoolExecutor.
    server = grpc.server(ThreadPoolExecutor())
    # Register server to gRPC server providing RidesServicer.
    rpc.add_RidesServicer_to_server(Rides(), server)
    # Use gRPC reflection to query methods and types available in server.
    names = (
        pb.DESCRIPTOR.services_by_name['Rides'].full_name,
        reflection.SERVICE_NAME,
    )
    # Enable reflection
    reflection.enable_server_reflection(names, server)

    addr = f'[::]:{config.port}'
    # gRPC uses HTTPS/2.0 to transfer data in-wire by default.
    # Connect to gRPC server using HTTP/2.0.
    server.add_insecure_port(addr)
    server.start()
    log.info('server ready on %s', addr)
    server.wait_for_termination()
