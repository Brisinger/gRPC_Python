"""
Module testing gRPC server built from generated gRPC service module.
The service module gets generated by serializing protobuf service definition. 
"""
from datetime import datetime
from socket import socket
from unittest.mock import MagicMock
import grpc
import pytest
import rides_pb2 as pb
import rides_pb2_grpc as rpc
import server


def test_start():
    """
    Test server start with Start service.
    """
    request = pb.StartRequest(
        car_id=7,
        driver_id='Bond',
        passenger_ids=['M', 'Q'],
        type=pb.POOL,
        location=pb.Location(
            lat=51.4871871,
            lng=-0.1266743,
        ),
    )
    # Instance of python datetime.
    time = datetime(2022, 2, 22, 22, 22, 22, 22)
    # Parse to Google's protobuf Timestamp type definition.
    request.time.FromDatetime(time)
    context = MagicMock()

    # Rides service Start invocation.
    rides = server.Rides()
    respid = rides.Start(request, context)
    assert respid != ''


def free_port():
    """
    Binds the socket to random port on which test gRPC server is listening.


    Returns:
    --------
        (int): Returns the address port on which mock gRPC server starts.
    """
    with socket() as sock:
        sock.bind(('localhost', 0))
        _, port = sock.getsockname()
        return port


@pytest.fixture
def conn():
    """
    Configures gRPC server instance with servicer stub for initial testing.


    Yields:
        (srv, stub): Generates a tuple of server and service stub instance.
    """
    # Gets a random port address on which server runs.
    port = free_port()
    # Build sever instance.
    srv = server.build_server(port)
    # Start the server on given port.
    srv.start()

    # Adding the channel and servicer stub method.
    with grpc.insecure_channel(f'localhost:{port}') as chan:
        stub = rpc.RidesStub(chan)

        yield srv, stub

    srv.stop(grace=0.1)


def test_start_server(conn):
    """
    Test the client requesting rpc service Start in gRPC server running on different thread.


    Args:
    -----
        conn (server, stub): Initial connection to server and start service stub tuple pair.
    """
    _, stub = conn

    # Request to Start service stub
    request = pb.StartRequest(
        car_id=7,
        driver_id='Bond',
        passenger_ids=['M', 'Q'],
        type=pb.POOL,
        location=pb.Location(
            lat=51.4871871,
            lng=-0.1266743,
        ),
    )
    # Instance of python datetime.
    time = datetime(2022, 2, 22, 22, 22, 22, 22)
    # Parsing python's date time to Goggle's protobuf Timestamp type definition.
    request.time.FromDatetime(time)
    response = stub.Start(request)
    assert response.id != ''
