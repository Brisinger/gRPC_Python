"""
Module connecting to gRPC server using insecure channel as a client.
"""
from datetime import datetime
import grpc
import log
import rides_pb2 as pb
import rides_pb2_grpc as rpc


class ClientError(Exception):
    """
    Customized exception Error generated by Client calling the method in gRPC server.
    """
    pass

class Client:
    """
    Client connecting gRPC server and sending request.

    It connects on insecure channel as gRPC server runs on insecure port.
    The gRPC client by default will only try initiating a connection when calling methods.
    It logs a message stating connected to host at a port on which gRPC server is listening
    before the server starts running. 

    Methods:
    --------
        close(): Closes the connection between client and gRPC server.
        ride_start(car_id:int, driver_id:str, passenger_ids:list[str], \
                   _type:str, lat:float, lng:float, time:datetime): Starts new ride request.
        track(events): Tracks stream of location based events.
    """
    def __init__(self, addr):
        self.chan = grpc.insecure_channel(addr)
        self.stub = rpc.RidesStub(self.chan)
        log.info('connected to %s', addr)

    def close(self):
        """
        Closes the connection channel with gRPC server.
        """
        self.chan.close()

    def ride_start(self, car_id:int, driver_id:str,
                   passenger_ids:list[str], \
                   _type:str, lat:float, lng:float, time: datetime) -> str:
        """
        Generate the request to start a ride.


        Args:
        -----
            car_id (int): Car id of the ride.
            driver_id (str): Driver id of the ride.
            passenger_ids (list[str]): Passenger ids of the ride.
            _type (str): Type of the ride.
            lat (float): Latitude of the ride location.
            lng (float): Longitude of the ride location.
            time (datetime): Date of the ride.
        
        Returns:
        --------
            str: Ride id designating the new ride generated.
        """
        request = pb.StartRequest(
            car_id = car_id,
            driver_id = driver_id,
            passenger_ids = passenger_ids,
            type = pb.POOL if _type == "POOL" else pb.REGULAR,
            location = pb.Location(
                lat = lat,
                lng = lng,
            ),
        )
        # Setting the protobuf time from python datetime.
        request.time.FromDatetime(time)
        log.info('ride started %s', request)

        # Calling the RPC while handlling Client error.
        # Calling Start method in gRPC service definition with timeout.
        try:
            response = self.stub.Start(request)
        except grpc.RpcError as err:
            log.error('start: %s (%s)', err, err.__class__.__mro__)
            raise ClientError(f'{err.code()}: {err.details()}') from err
        return response.id

    def track(self, events):
        """
        Track stream of location requests.


        Args:
        -----
            events: iterator of location events.
        """
        self.stub.Track(track_request(event) for event in events)


def track_request(event) -> pb.TrackRequest:
    """
    Generates a Track Request.


    Args:
    -----
        event: Location event.

    Returns:
    --------
        pb.TrackRequest: Protobuf language TrackRequest message type.
    """
    # Create TrackRequest instance serialized from proto definition.
    request = pb.TrackRequest(
        car_id = event.car_id,
        location = pb.Location(
            lat = event.lat,
            lng = event.lng,
        )
    )
    # Serialize python datetime to protobuf Timestamp type of data.
    request.time.FromDatetime(event.time)
    return request

if __name__ == "__main__":
    import config
    from events import rand_events


    addr = f'{config.host}:{config.port}'
    # Create the client.
    client = Client(addr)
    # Create events.
    events = rand_events(7)
    # Start the ride.
    try:
        ride_id = client.ride_start(
            car_id=7,
            driver_id='Bond',
            passenger_ids=['M', 'Q'],
            _type='POOL',
            lat=51.4871871,
            lng=-0.1266743,
            time=datetime(2021, 9, 30, 20, 15),
        )
        client.track(events=events)
        log.info('ride ID: %s', ride_id)
    except ClientError as ex:
        raise SystemExit(f'error: {ex}') from ex
    